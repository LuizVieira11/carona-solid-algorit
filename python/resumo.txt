O que está sendo utilizado no algoritmo para sua implementação em python:

A principal biblioteca utilizada para a fácil implementação dos grafos bipartidos foi a biblioteca NetworkX, com ela é possível realizar a criação e montagem de um grafo utilizando funções para uma organização prática do algoritmo.

No momento decidimos seguir com a utilização de apenas uma classe de usuário, nela irá conter todas as informações pessoais do usuário mais as informações necessárias para a implementação do grafo.
A classe tem atualmente implementado os seguintes atributos:
Nome | Destino | Máximo de Passageiros | Assentos Reservados | Vai viajar | É motorista

Todos os atributos da classe são utilizados pela lógica para realizar o devido emparelhamento dos motoristas com os passageiros.
Para verificação e separação por agora fizemos um algoritmo onde compara todos os motoristas com todos os passageiros através da igualdade do destino e se o número de assentos reservados é menor que o número de passageiros máximos, ao passar por essa verificação é feita a adição de uma aresta no grafo entre o motorista e passageiro e adiciona 1 no número de passageiros assentos reservados.
Segue o algoritmo no momento para verificação:

-----

# Criando um grafo bipartido com a biblioteca NetworkX
G = nx.Graph()

#Implementação das listas de motorista e passageiro

#Cria lista para fazer arestas no grafo
arestas = []
PARA p EM passageiros:
    PARA m EM motoristas:
        SE p.destino == m.destino E m.assentosReservados < m.passageirosMax:
            m.assentosReservados += 1
            arestas.adiciona((m, p))
            para
        FIM SE
    FIM PARA
FIM PARA

#Adicionando arestas a partir da lista de objetos utilizando a NetworkX
G.add_edges_from(arestas)

-----

Com essa parametrização de algoritmo realizamos o emparelhamento máximo de todos os passageiros com os motoristas possíveis, um adendo neste algoritmo é a falta de otimização, por exemplo, caso haja dois motoristas para Cerquilho e quatro passageiros para Cerquilho, se for possível, o algoritmo adiciona todos os quatro passageiros em um único motorista.
A próxima implementação prevista é, de acordo com o exemplo anterior, tentar realizar a separação de passageiros, podendo ser dois para cada motorista ou, caso tenha cinco passageiros, uma separação dois e três passageiros, tentando mirar na eficiência de caronas criadas no algoritmo.