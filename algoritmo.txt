Segue o algoritmo no momento para verificação:

-----

# Criando um grafo bipartido com a biblioteca NetworkX
G = nx.Graph()

#Implementação das listas de motorista e passageiro

#Cria lista para fazer arestas no grafo
arestas = []
PARA p EM passageiros:
    PARA m EM motoristas:
        SE p.destino == m.destino E m.assentosReservados < m.passageirosMax:
            m.assentosReservados += 1
            arestas.adiciona((m, p))
            para
        FIM SE
    FIM PARA
FIM PARA

#Adicionando arestas a partir da lista de objetos utilizando a NetworkX
G.add_edges_from(arestas)

-----

Com essa parametrização de algoritmo realizamos o emparelhamento máximo de todos os passageiros com os motoristas possíveis, um adendo neste algoritmo é a falta de otimização, por exemplo, caso haja dois motoristas para Cerquilho e quatro passageiros para Cerquilho, se for possível, o algoritmo adiciona todos os quatro passageiros em um único motorista.

A próxima implementação prevista é, de acordo com o exemplo anterior, tentar realizar a separação de passageiros, podendo ser dois para cada motorista ou, caso tenha cinco passageiros, uma separação dois e três passageiros, tentando mirar na eficiência de caronas criadas no algoritmo.

A otimização do algoritmo anterior foi realizado, de modo que todos os passageiros sejam igualmente distribuidos entre os motoristas disponíveis, pois por exemplo, vamos imaginar que o motorista queira dividir o valor da gasolina com todo mundo, caso não haja uma distribuição igualitária, existe a possibilidade do motorista sair com seu carro cheio de gente ou vazio enquanto outros motoristas ficaram com os passageiros.
A refatoração do algoritmo foi crucial para a realização desse feito, a seguir será escrito o algoritmo em pseudo-código para entendimento geral de como está funcionando no momento o algoritmo.
Segue:

-----

# Criando um grafo bipartido com a biblioteca NetworkX
G = nx.Graph()

#Implementação das listas de motorista e passageiro

# Distribuindo passageiros de maneira justa ao criar arestas entre motoristas e passageiros
PARA p EM passageiros:
    motoristas_disponiveis = [m PARA m EM motoristas SE m.destino == p.destino E m.assentosReservados < m.passageirosMax]
    SE motoristas_disponiveis:
        # Ordena os motoristas pela quantidade de vagas disponíveis, para priorizar motoristas menos ocupados
        motoristas_disponiveis.ordena(m: m.assentosReservados)
        motorista_selecionado = motoristas_disponiveis[0]
        motorista_selecionado.assentosReservados += 1
        arestas.adiciona((motorista_selecionado, p))  # Conecta motorista e passageiro no grafo
    FIM SE
FIM PARA

#Adicionando arestas a partir da lista de objetos utilizando a NetworkX
G.add_edges_from(arestas)

-----